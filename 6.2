server.js :
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// ----------------------------
// Hardcoded user & secret key
// ----------------------------
const USER = { username: "user1", password: "password123" };
const JWT_SECRET = "mybanksecretkey";

// ----------------------------
// In-memory account data
// ----------------------------
let account = {
    balance: 1000 // initial balance
};

// ----------------------------
// JWT Authentication Middleware
// ----------------------------
function authenticateJWT(req, res, next) {
    const authHeader = req.headers["authorization"];
    if (!authHeader) {
        return res.status(401).json({ message: "Authorization header missing" });
    }

    const token = authHeader.split(" ")[1]; // Bearer <token>

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) return res.status(403).json({ message: "Invalid token" });
        req.user = user;
        next();
    });
}

// ----------------------------
// Routes
// ----------------------------

// LOGIN: returns JWT token
app.post("/login", (req, res) => {
    const { username, password } = req.body;

    if (username === USER.username && password === USER.password) {
        const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: "1h" });
        return res.json({ token });
    } else {
        return res.status(401).json({ message: "Invalid username or password" });
    }
});

// BALANCE: protected route
app.get("/balance", authenticateJWT, (req, res) => {
    res.json({ balance: account.balance });
});

// DEPOSIT: protected route
app.post("/deposit", authenticateJWT, (req, res) => {
    const { amount } = req.body;
    if (!amount || amount <= 0) {
        return res.status(400).json({ message: "Enter a valid amount" });
    }
    account.balance += amount;
    res.json({ message: `Deposited ${amount} successfully`, balance: account.balance });
});

// WITHDRAW: protected route
app.post("/withdraw", authenticateJWT, (req, res) => {
    const { amount } = req.body;
    if (!amount || amount <= 0) {
        return res.status(400).json({ message: "Enter a valid amount" });
    }
    if (amount > account.balance) {
        return res.status(400).json({ message: "Insufficient balance" });
    }
    account.balance -= amount;
    res.json({ message: `Withdrew ${amount} successfully`, balance: account.balance });
});

// ----------------------------
// Start server
// ----------------------------
const PORT = 3000;
app.listen(PORT, () => console.log(`Banking API running at http://localhost:${PORT}`));
